<%- contentFor('body') %>

<div class="flex flex-col md:flex-row md:items-center justify-between mb-8 gap-4">
  <div class="flex-1">
    <h1 class="text-2xl font-bold text-gray-800 mb-2">User Management</h1>
    <p class="text-gray-600">Manage admin users and their permissions</p>
  </div>
  
  <!-- Add User Button -->
  <button id="new-user-btn" class="btn bg-blue-600 hover:bg-blue-700 text-white flex items-center">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
    </svg>
    Add User
  </button>
</div>

<!-- Alert container for notifications -->
<div id="alert-container" class="mb-6 hidden">
  <div class="px-4 py-3 rounded relative" role="alert" id="alert-box">
    <span id="alert-message" class="block sm:inline"></span>
    <button type="button" class="absolute top-0 right-0 px-4 py-3" id="close-alert">
      <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
        <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
      </svg>
    </button>
  </div>
</div>

<!-- Users Table -->
<div class="bg-white rounded-lg shadow overflow-hidden">
  <div class="px-6 py-4 border-b border-gray-200">
    <h3 class="text-lg font-semibold text-gray-800">User Accounts</h3>
  </div>
  
  <div class="overflow-x-auto">
    <% if (users.length === 0) { %>
      <div class="p-6 text-center text-gray-500">
        <p>No users found. Create a new user to get started.</p>
      </div>
    <% } else { %>
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Username</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Full Name</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Phone</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Short Bio</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200" id="users-table-body">
          <% users.forEach(user => { %>
            <tr data-id="<%= user._id %>">
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                <%= user.username %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <%= user.fullName || '-' %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <%= user.userPhone || '-' %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <%= user.email || '-' %>
              </td>
              <td class="px-6 py-4 text-sm text-gray-500 max-w-xs truncate">
                <%= user.shortBio || '-' %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                  <%= user.userRole === 'admin' ? 'bg-green-100 text-green-800' : 
                     user.userRole === 'manager' ? 'bg-blue-100 text-blue-800' : 
                     'bg-gray-100 text-gray-800' %>">
                  <%= user.userRole || 'admin' %>
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <div class="flex space-x-2">
                  <button class="edit-user-btn text-blue-600 hover:text-blue-800">
                    Edit
                  </button>
                  <button class="delete-user-btn text-red-600 hover:text-red-800" 
                    <%= user.username === username || user.userRole === 'admin' ? 'disabled' : '' %>
                    <%= user.username === username || user.userRole === 'admin' ? 'style="opacity: 0.5; cursor: not-allowed;"' : '' %>>
                    Delete
                  </button>
                </div>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    <% } %>
  </div>
</div>

<!-- Add/Edit User Modal -->
<div id="user-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50 hidden">
  <div class="bg-white rounded-lg max-w-md w-full mx-4">
    <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
      <h3 class="text-lg font-semibold text-gray-800" id="modal-title">Add New User</h3>
      <button id="close-modal" class="text-gray-500 hover:text-gray-700">
        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
          <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
        </svg>
      </button>
    </div>
    
    <form id="user-form" class="px-6 py-4">
      <input type="hidden" id="user-id">
      
      <div class="space-y-4">
        <!-- Username -->
        <div>
          <label for="username" class="block text-sm font-medium text-gray-700">Username <span class="text-red-500">*</span></label>
          <input type="text" id="username" name="username" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
        </div>
        
        <!-- Password (required for new users) -->
        <div>
          <label for="password" class="block text-sm font-medium text-gray-700">Password <span class="text-red-500 password-required">*</span></label>
          <input type="password" id="password" name="password" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
          <p class="text-xs text-gray-500 mt-1 password-hint hidden">Leave blank to keep current password</p>
        </div>
        
        <!-- Full Name -->
        <div>
          <label for="fullName" class="block text-sm font-medium text-gray-700">Full Name</label>
          <input type="text" id="fullName" name="fullName" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
        </div>
        
        <!-- Phone -->
        <div>
          <label for="userPhone" class="block text-sm font-medium text-gray-700">Phone</label>
          <input type="text" id="userPhone" name="userPhone" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
        </div>
        
        <!-- Email -->
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
          <input type="email" id="email" name="email" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
        </div>
        
        <!-- User Role -->
        <div>
          <label for="userRole" class="block text-sm font-medium text-gray-700">Role</label>
          <select id="userRole" name="userRole" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
            <option value="admin">Admin</option>
            <option value="manager">Manager</option>
            <option value="staff">Staff</option>
            <option value="receptionist">Receptionist</option>
            <option value="user">User</option>
          </select>
        </div>
        
        <!-- Short Bio -->
        <div>
          <label for="shortBio" class="block text-sm font-medium text-gray-700">Short Bio</label>
          <textarea id="shortBio" name="shortBio" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" maxlength="200"></textarea>
          <p class="text-xs text-gray-500 mt-1">Maximum 200 characters</p>
        </div>
      </div>
    </form>
    
    <div class="px-6 py-4 border-t border-gray-200 flex justify-end">
      <button id="cancel-btn" class="btn border border-gray-300 bg-white text-gray-700 mr-2">Cancel</button>
      <button id="save-user-btn" class="btn bg-blue-600 text-white">Save</button>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="delete-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50 hidden">
  <div class="bg-white rounded-lg max-w-md w-full mx-4">
    <div class="px-6 py-4 border-b border-gray-200">
      <h3 class="text-lg font-semibold text-gray-800">Confirm Delete</h3>
    </div>
    
    <div class="px-6 py-4">
      <p>Are you sure you want to delete this user? This action cannot be undone.</p>
      <p class="mt-2 font-semibold" id="delete-user-name"></p>
    </div>
    
    <div class="px-6 py-4 border-t border-gray-200 flex justify-end">
      <button id="cancel-delete-btn" class="btn border border-gray-300 bg-white text-gray-700 mr-2">Cancel</button>
      <button id="confirm-delete-btn" class="btn bg-red-600 text-white">Delete</button>
    </div>
  </div>
</div>

<%- contentFor('script') %>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const newUserBtn = document.getElementById('new-user-btn');
    const userModal = document.getElementById('user-modal');
    const closeModal = document.getElementById('close-modal');
    const cancelBtn = document.getElementById('cancel-btn');
    const saveUserBtn = document.getElementById('save-user-btn');
    const userForm = document.getElementById('user-form');
    const modalTitle = document.getElementById('modal-title');
    const userId = document.getElementById('user-id');
    const passwordRequired = document.querySelector('.password-required');
    const passwordHint = document.querySelector('.password-hint');
    
    const deleteModal = document.getElementById('delete-modal');
    const cancelDeleteBtn = document.getElementById('cancel-delete-btn');
    const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
    const deleteUserName = document.getElementById('delete-user-name');
    
    const alertContainer = document.getElementById('alert-container');
    const alertBox = document.getElementById('alert-box');
    const alertMessage = document.getElementById('alert-message');
    const closeAlert = document.getElementById('close-alert');
    
    let deleteUserId = null;
    
    // Event Listeners
    newUserBtn.addEventListener('click', openAddUserModal);
    closeModal.addEventListener('click', closeUserModal);
    cancelBtn.addEventListener('click', closeUserModal);
    saveUserBtn.addEventListener('click', saveUser);
    closeAlert.addEventListener('click', () => alertContainer.classList.add('hidden'));
    
    cancelDeleteBtn.addEventListener('click', () => deleteModal.classList.add('hidden'));
    confirmDeleteBtn.addEventListener('click', deleteUser);
    
    // Add edit button event listeners
    document.querySelectorAll('.edit-user-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        const row = this.closest('tr');
        const userId = row.dataset.id;
        openEditUserModal(userId);
      });
    });
    
    // Add delete button event listeners
    document.querySelectorAll('.delete-user-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        if (this.disabled) return;
        
        const row = this.closest('tr');
        const userId = row.dataset.id;
        const username = row.querySelector('td:first-child').textContent.trim();
        openDeleteConfirmation(userId, username);
      });
    });
    
    // Functions
    function openAddUserModal() {
      modalTitle.textContent = 'Add New User';
      userId.value = '';
      userForm.reset();
      passwordRequired.classList.remove('hidden');
      passwordHint.classList.add('hidden');
      document.getElementById('password').setAttribute('required', 'required');
      userModal.classList.remove('hidden');
    }
    
    async function openEditUserModal(id) {
      modalTitle.textContent = 'Edit User';
      userId.value = id;
      passwordRequired.classList.add('hidden');
      passwordHint.classList.remove('hidden');
      document.getElementById('password').removeAttribute('required');
      
      try {
        const response = await fetch(`/admin/api/users?id=${id}`);
        const data = await response.json();
        
        if (data.success && data.users.length > 0) {
          const user = data.users.find(u => u._id === id);
          if (user) {
            document.getElementById('username').value = user.username || '';
            document.getElementById('fullName').value = user.fullName || '';
            document.getElementById('userPhone').value = user.userPhone || '';
            document.getElementById('email').value = user.email || '';
            document.getElementById('userRole').value = user.userRole || 'admin';
            document.getElementById('shortBio').value = user.shortBio || '';
            userModal.classList.remove('hidden');
          } else {
            showAlert('User not found', 'error');
          }
        } else {
          showAlert('Error loading user data', 'error');
        }
      } catch (error) {
        console.error('Error fetching user:', error);
        showAlert('Error loading user data', 'error');
      }
    }
    
    function closeUserModal() {
      userModal.classList.add('hidden');
      userForm.reset();
    }
    
    async function saveUser() {
      const formData = new FormData(userForm);
      const userData = {};
      
      formData.forEach((value, key) => {
        userData[key] = value;
      });
      
      // Validation
      if (!userData.username) {
        showAlert('Username is required', 'error');
        return;
      }
      
      if (!userId.value && !userData.password) {
        showAlert('Password is required for new users', 'error');
        return;
      }
      
      // If editing and password is empty, remove it from the payload
      if (userId.value && !userData.password) {
        delete userData.password;
      }
      
      try {
        let url = '/admin/api/users';
        let method = 'POST';
        
        if (userId.value) {
          url = `/admin/api/users/${userId.value}`;
          method = 'PUT';
        }
        
        const response = await fetch(url, {
          method,
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(userData)
        });
        
        const data = await response.json();
        
        if (data.success) {
          showAlert(data.message, 'success');
          closeUserModal();
          
          // Reload the page after a short delay
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          showAlert(data.message || 'Error saving user', 'error');
        }
      } catch (error) {
        console.error('Error saving user:', error);
        showAlert('An error occurred while saving the user', 'error');
      }
    }
    
    function openDeleteConfirmation(id, username) {
      deleteUserId = id;
      deleteUserName.textContent = `Username: ${username}`;
      deleteModal.classList.remove('hidden');
    }
    
    async function deleteUser() {
      if (!deleteUserId) return;
      
      try {
        const response = await fetch(`/admin/api/users/${deleteUserId}`, {
          method: 'DELETE'
        });
        
        const data = await response.json();
        
        if (data.success) {
          showAlert('User deleted successfully', 'success');
          deleteModal.classList.add('hidden');
          
          // Remove the row from the table
          const row = document.querySelector(`tr[data-id="${deleteUserId}"]`);
          if (row) row.remove();
          
          // If no more users, reload to show the empty message
          if (document.querySelectorAll('#users-table-body tr').length === 0) {
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          }
        } else {
          showAlert(data.message || 'Error deleting user', 'error');
        }
      } catch (error) {
        console.error('Error deleting user:', error);
        showAlert('An error occurred while deleting the user', 'error');
      }
    }
    
    function showAlert(message, type) {
      alertMessage.textContent = message;
      alertBox.className = 'px-4 py-3 rounded relative';
      
      if (type === 'success') {
        alertBox.classList.add('bg-green-100', 'text-green-700', 'border', 'border-green-400');
      } else {
        alertBox.classList.add('bg-red-100', 'text-red-700', 'border', 'border-red-400');
      }
      
      alertContainer.classList.remove('hidden');
      
      // Auto-hide success messages after 5 seconds
      if (type === 'success') {
        setTimeout(() => {
          alertContainer.classList.add('hidden');
        }, 5000);
      }
    }
  });
</script> 
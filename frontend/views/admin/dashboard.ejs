<%- contentFor('body') %>

<!-- Conference Selector -->
<div class="flex flex-col md:flex-row md:items-center justify-between mb-8 gap-4">
  <div class="flex-1">
    <h1 class="text-2xl font-bold text-gray-800 mb-2">Dashboard</h1>
    <div class="flex flex-col md:flex-row md:items-center gap-2">
      <div class="flex items-center">
        <label for="conference-select" class="text-gray-700 font-medium mr-4">Choose Conference:</label>
        <div class="relative flex-1">
          <select id="conference-select" class="block appearance-none w-full bg-white border border-gray-300 hover:border-gray-400 px-4 py-2 pr-8 rounded shadow leading-tight focus:outline-none focus:shadow-outline">
            <% if (typeof conferences !== 'undefined' && conferences.length > 0) { %>
              <% conferences.forEach((conference, index) => { %>
                <option value="<%= conference.code %>" <%= index === 0 ? 'selected' : '' %>><%= conference.name %></option>
              <% }); %>
            <% } else { %>
              <option value="" disabled>No conferences available</option>
            <% } %>
          </select>
          <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
            <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
              <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
            </svg>
          </div>
        </div>
      </div>
      
      <!-- Conference Action Buttons moved next to dropdown -->
      <div class="flex items-center gap-2 mt-2 md:mt-0">
        <button id="select-conference-btn" class="conference-action-btn btn bg-sky-500 hover:bg-sky-600 text-white px-4 py-2 rounded-lg shadow-md transition-all duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-sky-400 focus:ring-opacity-75">
          Select
        </button>
        <button id="stop-conference-btn" class="conference-action-btn btn bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg shadow-md transition-all duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-opacity-75">
          Stop
        </button>
      </div>
    </div>
  </div>
  
  <div class="flex items-center justify-end mt-4 md:mt-0">
    <!-- New Conference Button -->
    <button id="new-conference-btn" class="btn bg-blue-600 hover:bg-blue-700 text-white flex items-center px-4 py-2 rounded-lg shadow-md">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
      </svg>
      New Conference
    </button>
  </div>
</div>

<!-- Conference Information -->
<div id="conference-info" class="bg-white rounded-lg shadow p-6 mb-8 hidden">
  <h3 class="text-xl font-semibold text-gray-800 mb-4">Conference Information</h3>
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <div>
      <p class="text-gray-500 mb-1">Conference Name</p>
      <p class="text-lg font-medium" id="conf-name">-</p>
    </div>
    <div>
      <p class="text-gray-500 mb-1">Location</p>
      <p class="text-lg font-medium" id="conf-location">-</p>
    </div>
    <div>
      <p class="text-gray-500 mb-1">Time</p>
      <p class="text-lg font-medium" id="conf-time">-</p>
    </div>
    <div>
      <p class="text-gray-500 mb-1">Dates</p>
      <p class="text-lg font-medium" id="conf-dates">-</p>
    </div>
  </div>
</div>

<!-- Dashboard Stats -->
<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-6 mb-8">
  <!-- Total Registrations -->
  <div class="bg-white rounded-lg shadow p-6">
    <div class="flex justify-between items-start">
      <div>
        <p class="text-gray-500 text-sm">Total Registrations</p>
        <h2 class="text-3xl font-bold text-gray-800" id="total-registrations"><%= stats.totalParticipants %></h2>
      </div>
      <div class="bg-blue-100 p-3 rounded-full">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
        </svg>
      </div>
    </div>
  </div>
  
  <!-- Lunch -->
  <div class="bg-white rounded-lg shadow p-6">
    <div class="flex justify-between items-start">
      <div>
        <p class="text-gray-500 text-sm">Lunch Registrations</p>
        <h2 class="text-3xl font-bold text-gray-800" id="lunch-count"><%= stats.lunchCount %></h2>
      </div>
      <div class="bg-yellow-100 p-3 rounded-full">
        <svg class="h-6 w-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg> 
      </div>
    </div>
  </div>
  
  <!-- Dinner -->
  <div class="bg-white rounded-lg shadow p-6">
    <div class="flex justify-between items-start">
      <div>
        <p class="text-gray-500 text-sm">Dinner Registrations</p>
        <h2 class="text-3xl font-bold text-gray-800" id="dinner-count"><%= stats.dinnerCount %></h2>
      </div>
      <div class="bg-indigo-100 p-3 rounded-full">
        <svg class="h-6 w-6 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path></svg>
      </div>
    </div>
  </div>
  
  <!-- Transport -->
  <div class="bg-white rounded-lg shadow p-6">
    <div class="flex justify-between items-start">
      <div>
        <p class="text-gray-500 text-sm">Transport Registrations</p>
        <h2 class="text-3xl font-bold text-gray-800" id="transport-count"><%= stats.transportCount %></h2>
      </div>
      <div class="bg-pink-100 p-3 rounded-full">
       <svg class="h-6 w-6 text-pink-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path></svg> 
      </div>
    </div>
  </div>

  <!-- Hoc Vien -->
  <div class="bg-white rounded-lg shadow p-6">
    <div class="flex justify-between items-start">
      <div>
        <p class="text-gray-500 text-sm">Học viện Registrations</p>
        <h2 class="text-3xl font-bold text-gray-800" id="hocvien-count"><%= stats.hocVienCount %></h2>
      </div>
      <div class="bg-teal-100 p-3 rounded-full">
         <svg class="h-6 w-6 text-teal-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path></svg>
      </div>
    </div>
  </div>
  
  <!-- Don Vi Ngoai -->
  <div class="bg-white rounded-lg shadow p-6">
    <div class="flex justify-between items-start">
      <div>
        <p class="text-gray-500 text-sm">Đơn vị ngoài Registrations</p>
        <h2 class="text-3xl font-bold text-gray-800" id="donvingoai-count"><%= stats.donViNgoaiCount %></h2>
      </div>
      <div class="bg-purple-100 p-3 rounded-full">
        <svg class="h-6 w-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path></svg>
      </div>
    </div>
  </div>

</div>

<!-- Action Buttons -->
<div class="flex flex-wrap gap-4 mb-8">
  <a href="/admin/export" class="btn bg-green-600 hover:bg-green-700 text-white">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
    </svg>
    Export to Excel
  </a>
  
  <button id="send-bulk-emails" class="btn bg-blue-600 hover:bg-blue-700 text-white">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
    </svg>
    Send Bulk Emails
  </button>
</div>

<!-- Alert container for notifications -->
<div id="alert-container" class="mb-6 hidden">
  <div class="px-4 py-3 rounded relative" role="alert" id="alert-box">
    <span id="alert-message" class="block sm:inline"></span>
    <button type="button" class="absolute top-0 right-0 px-4 py-3" id="close-alert">
      <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
        <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
      </svg>
    </button>
  </div>
</div>

<!-- Registered Participants Table -->
<div class="bg-white rounded-lg shadow">
  <div class="px-6 py-4 border-b border-gray-200">
    <h3 class="text-lg font-semibold text-gray-800">Registered Participants</h3>
    <p class="text-sm text-gray-600 mt-1">
      Participant IDs are conference-specific: each conference starts from "0001" regardless of other conferences.
    </p>
  </div>
  
  <div>
    <% if (participants.length === 0) { %>
      <div class="p-6 text-center text-gray-500">
        <p>No participants registered yet.</p>
      </div>
    <% } else { %>
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Phone</th>
            <%/* <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Address</th> */%>
            <%/* <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Age</th> */%>
            <%/* <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Business</th> */%>
            <%/* <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nationality</th> */%>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Work Unit</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rank</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Academic</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Speech</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Lunch</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Dinner</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Transport</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Feedback</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Questions</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Reg. Time</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Attendance</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email Sent</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200" id="participants-table-body">
          <% participants.forEach((participant, index) => { %>
            <%# participant.displayId is now directly available from the controller %>
            <% const participantIdToDisplay = participant.displayId || 'N/A'; %>
            <tr data-id="<%= participant._id %>" data-conference="<%= participant.conferenceCode || 'CONF' %>">
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                <%= participantIdToDisplay %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                <%= participant.name %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <%= participant.email %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <%= participant.phone || '-' %>
              </td>
              <%/* <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"> */%>
                <%/*= participant.address || '-' */%>
              <%/* </td> */%>
              <%/* <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"> */%>
                <%/*= participant.age || '-' */%>
              <%/* </td> */%>
              <%/* <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"> */%>
                <%/*= participant.business || '-' */%>
              <%/* </td> */%>
              <%/* <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"> */%>
                <%/*= participant.nationality || '-' */%>
              <%/* </td> */%>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <%= participant.workunit || '-' %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <%= participant.rank || '-' %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <%= participant.academic || '-' %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <%= participant.role || '-' %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <% if (participant.speech) { %>
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                    Yes
                  </span>
                <% } else { %>
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                    No
                  </span>
                <% } %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <% if (participant.lunch) { %>
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                    Yes
                  </span>
                <% } else { %>
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                    No
                  </span>
                <% } %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <% if (participant.dinner) { %>
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                    Yes
                  </span>
                <% } else { %>
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                    No
                  </span>
                <% } %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <% if (participant.transport) { %>
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                    Yes
                  </span>
                <% } else { %>
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                    No
                  </span>
                <% } %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 truncate max-w-xs">
                <%= participant.feedback || '-' %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 truncate max-w-xs">
                <%= participant.questions || '-' %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <%= new Date(participant.registrationTime).toLocaleString('vi-VN') %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <% if (participant.attendanceStatus === 'attended') { %>
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                    Attended
                  </span>
                <% } else if (participant.attendanceStatus === 'absent') { %>
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                    Absent
                  </span>
                <% } else { %>
                  <button class="mark-attendance-btn btn btn-sm bg-gray-200 hover:bg-gray-300 text-gray-700" data-action="attended">Mark Attended</button>
                  <button class="mark-attendance-btn btn btn-sm bg-gray-200 hover:bg-gray-300 text-gray-700 mt-1" data-action="absent">Mark Absent</button>
                <% } %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <% if (participant.emailSent) { %>
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                    Sent
                  </span>
                <% } else { %>
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                    Pending
                  </span>
                <% } %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <div class="flex space-x-2">
                  <% if (!participant.emailSent) { %>
                    <button class="send-email-btn text-blue-600 hover:text-blue-800">
                      Send Email
                    </button>
                  <% } %>
                  <button class="edit-participant-btn text-indigo-600 hover:text-indigo-900">Edit</button>
                  <button class="delete-participant-btn text-red-600 hover:text-red-900">Delete</button>
                </div>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    <% } %>
  </div>
</div>

<!-- New Conference Modal -->
<div id="new-conference-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50 hidden">
  <div class="bg-white rounded-lg max-w-2xl w-full mx-4 max-h-[90vh] flex flex-col">
    <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center sticky top-0 bg-white">
      <h3 class="text-xl font-bold text-blue-700">Thêm Hội Nghị Mới</h3>
      <button id="close-conference-modal" class="text-gray-500 hover:text-gray-700">
        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
          <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
        </svg>
      </button>
    </div>
    
    <div class="overflow-y-auto flex-1">
    <form id="new-conference-form" class="px-6 py-4">
      <div class="space-y-6">
        <!-- Conference Name -->
        <div>
            <label for="conference-name" class="block text-md font-semibold text-gray-800 mb-2">Tên hội nghị <span class="text-red-500">*</span></label>
          <input type="text" id="conference-name" name="name" class="form-input w-full border border-gray-400 rounded-md py-2 px-3 text-gray-800" required>
        </div>
        
        <!-- Conference Dates -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
              <label for="start-date" class="block text-md font-semibold text-gray-800 mb-2">Ngày bắt đầu <span class="text-red-500">*</span></label>
            <input type="date" id="start-date" name="startDate" class="form-input w-full border border-gray-400 rounded-md py-2 px-3 text-gray-800" required>
          </div>
          <div>
              <label for="end-date" class="block text-md font-semibold text-gray-800 mb-2">Ngày kết thúc <span class="text-red-500">*</span></label>
            <input type="date" id="end-date" name="endDate" class="form-input w-full border border-gray-400 rounded-md py-2 px-3 text-gray-800" required>
          </div>
        </div>
        
        <!-- Conference Time and Code (side by side) -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
              <label for="time" class="block text-md font-semibold text-gray-800 mb-2">Thời gian <span class="text-red-500">*</span></label>
              <input type="text" id="time" name="time" class="form-input w-full border border-gray-400 rounded-md py-2 px-3 text-gray-800" placeholder="VD: 9:00 - 12:00, 14:00 - 17:00" required>
              <p class="text-xs text-gray-500 mt-1">Sử dụng '-' giữa thời gian bắt đầu và kết thúc, ',' để phân cách các khung giờ</p>
          </div>
          <div>
              <label for="conference-code" class="block text-md font-semibold text-gray-800 mb-2">Mã hội nghị <span class="text-red-500">*</span></label>
              <input type="text" id="conference-code" name="code" maxlength="4" class="form-input w-full border border-gray-400 rounded-md py-2 px-3 text-gray-800 uppercase" required pattern="[A-Za-z0-9]{4}" title="Vui lòng nhập mã 4 ký tự (chỉ chữ và số)">
          </div>
        </div>
        
        <!-- Location Dropdown -->
        <div>
            <label for="location" class="block text-md font-semibold text-gray-800 mb-2">Địa điểm <span class="text-red-500">*</span></label>
          <div class="relative">
            <select id="location" name="location" class="form-input w-full border border-gray-400 rounded-md py-2 px-3 text-gray-800 appearance-none" required>
                <option value="" disabled>Chọn địa điểm</option>
              <!-- Will be populated with locations -->
            </select>
            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
              <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
              </svg>
            </div>
          </div>
        </div>
        
        <!-- Description -->
        <div>
            <label for="description" class="block text-md font-semibold text-gray-800 mb-2">Mô tả/Chương trình hội nghị</label>
          <textarea id="description" name="description" rows="3" class="form-input w-full border border-gray-400 rounded-md py-2 px-3 text-gray-800"></textarea>
        </div>
        
        <!-- Registration Fields -->
        <div>
            <label class="block text-md font-semibold text-gray-800 mb-2">Các trường đăng ký</label>
            <p class="text-sm text-gray-600 mb-2">Chọn các trường sẽ xuất hiện trên form đăng ký cho người tham dự.</p>
            <div class="max-h-96 overflow-y-auto border border-gray-200 rounded-lg p-4">
          <div class="grid grid-cols-2 gap-4">
                <!-- Basic Information -->
                <div class="space-y-2">
            <div class="flex items-center">
                    <input type="checkbox" id="field-name" name="registrationFields" value="name" class="form-checkbox h-4 w-4 text-blue-600" checked disabled>
                    <label for="field-name" class="ml-2 text-gray-700">Họ và tên</label>
            </div>
            <div class="flex items-center">
                    <input type="checkbox" id="field-email" name="registrationFields" value="email" class="form-checkbox h-4 w-4 text-blue-600" checked disabled>
                    <label for="field-email" class="ml-2 text-gray-700">Email</label>
            </div>
            <div class="flex items-center">
                    <input type="checkbox" id="field-phone" name="registrationFields" value="phone" class="form-checkbox h-4 w-4 text-blue-600" checked disabled>
                    <label for="field-phone" class="ml-2 text-gray-700">Số điện thoại</label>
            </div>
            <div class="flex items-center">
                    <input type="checkbox" id="field-address" name="registrationFields" value="address" class="form-checkbox h-4 w-4 text-blue-600">
                    <label for="field-address" class="ml-2 text-gray-700">Địa chỉ</label>
            </div>
            <div class="flex items-center">
                    <input type="checkbox" id="field-age" name="registrationFields" value="age" class="form-checkbox h-4 w-4 text-blue-600">
                    <label for="field-age" class="ml-2 text-gray-700">Tuổi</label>
            </div>
            <div class="flex items-center">
                    <input type="checkbox" id="field-business" name="registrationFields" value="business" class="form-checkbox h-4 w-4 text-blue-600">
                    <label for="field-business" class="ml-2 text-gray-700">Lĩnh vực kinh doanh</label>
            </div>
            <div class="flex items-center">
                    <input type="checkbox" id="field-nationality" name="registrationFields" value="nationality" class="form-checkbox h-4 w-4 text-blue-600">
                    <label for="field-nationality" class="ml-2 text-gray-700">Quốc tịch</label>
            </div>
            <div class="flex items-center">
                    <input type="checkbox" id="field-workunit" name="registrationFields" value="workunit" class="form-checkbox h-4 w-4 text-blue-600">
                    <label for="field-workunit" class="ml-2 text-gray-700">Đơn vị công tác</label>
            </div>
            <div class="flex items-center">
                    <input type="checkbox" id="field-position" name="registrationFields" value="position" class="form-checkbox h-4 w-4 text-blue-600">
                    <label for="field-position" class="ml-2 text-gray-700">Chức vụ</label>
            </div>
            <div class="flex items-center">
                    <input type="checkbox" id="field-speciality" name="registrationFields" value="speciality" class="form-checkbox h-4 w-4 text-blue-600">
                    <label for="field-speciality" class="ml-2 text-gray-700">Chuyên ngành</label>
            </div>
                </div>

                <!-- Additional Information -->
                <div class="space-y-2">
            <div class="flex items-center">
                    <input type="checkbox" id="field-rank" name="registrationFields" value="rank" class="form-checkbox h-4 w-4 text-blue-600">
                    <label for="field-rank" class="ml-2 text-gray-700">Cấp bậc</label>
            </div>
                  <div class="flex items-center">
                    <input type="checkbox" id="field-academic" name="registrationFields" value="academic" class="form-checkbox h-4 w-4 text-blue-600">
                    <label for="field-academic" class="ml-2 text-gray-700">Học hàm học vị</label>
                  </div>
                  <div class="flex items-center">
                    <input type="checkbox" id="field-role" name="registrationFields" value="role" class="form-checkbox h-4 w-4 text-blue-600">
                    <label for="field-role" class="ml-2 text-gray-700">Vai trò (Báo cáo viên/Tham dự)</label>
                  </div>
                  <div class="flex items-center">
                    <input type="checkbox" id="field-speech" name="registrationFields" value="speech" class="form-checkbox h-4 w-4 text-blue-600">
                    <label for="field-speech" class="ml-2 text-gray-700">Có phát biểu</label>
                  </div>
                  <div class="flex items-center">
                    <input type="checkbox" id="field-lunch" name="registrationFields" value="lunch" class="form-checkbox h-4 w-4 text-blue-600">
                    <label for="field-lunch" class="ml-2 text-gray-700">Ăn trưa</label>
                  </div>
                  <div class="flex items-center">
                    <input type="checkbox" id="field-dinner" name="registrationFields" value="dinner" class="form-checkbox h-4 w-4 text-blue-600">
                    <label for="field-dinner" class="ml-2 text-gray-700">Ăn tối</label>
                  </div>
                  <div class="flex items-center">
                    <input type="checkbox" id="field-transport" name="registrationFields" value="transport" class="form-checkbox h-4 w-4 text-blue-600">
                    <label for="field-transport" class="ml-2 text-gray-700">Đăng ký theo xe về học viện</label>
                  </div>
                  <div class="flex items-center">
                    <input type="checkbox" id="field-feedback" name="registrationFields" value="feedback" class="form-checkbox h-4 w-4 text-blue-600">
                    <label for="field-feedback" class="ml-2 text-gray-700">Góp ý về công tác tổ chức</label>
                  </div>
                  <div class="flex items-center">
                    <input type="checkbox" id="field-questions" name="registrationFields" value="questions" class="form-checkbox h-4 w-4 text-blue-600">
                    <label for="field-questions" class="ml-2 text-gray-700">Câu hỏi</label>
                  </div>
                  <div class="flex items-center">
                    <input type="checkbox" id="field-source" name="registrationFields" value="source" class="form-checkbox h-4 w-4 text-blue-600">
                    <label for="field-source" class="ml-2 text-gray-700">Nguồn biết về hội nghị</label>
                  </div>
                </div>
              </div>
          </div>
        </div>
        
        <!-- Main Speaker (hidden, moved to description) -->
        <input type="hidden" id="main-speaker" name="mainSpeaker" class="form-input w-full rounded-md">
        
        <!-- Max Attendees (required but hidden) -->
        <input type="hidden" id="max-attendees" name="maxAttendees" value="100" class="form-input w-full rounded-md">
      </div>
    </form>
    </div>
    
    <div class="px-6 py-4 border-t border-gray-200 flex justify-end sticky bottom-0 bg-white">
      <button type="button" id="cancel-conference-btn" class="btn border border-gray-400 bg-white hover:bg-gray-100 text-gray-800 font-medium py-2 px-6 rounded-md mr-2">Hủy</button>
      <button type="button" id="save-conference-btn" class="btn bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-md">Tạo</button>
    </div>
  </div>
</div>

<!-- Modal to view participant details -->
<div id="participant-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50 hidden">
  <div class="bg-white rounded-lg max-w-3xl w-full mx-4 max-h-[90vh] flex flex-col">
    <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center sticky top-0 bg-white z-10">
      <h3 class="text-lg font-semibold text-gray-800" id="modal-title">Participant Details</h3>
      <button id="close-modal" class="text-gray-500 hover:text-gray-700">
        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
          <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
        </svg>
      </button>
    </div>
    
    <div class="overflow-y-auto px-6 py-4 flex-1">
      <form id="edit-participant-form" class="space-y-4">
        <input type="hidden" id="participant-id" name="_id">
        <input type="hidden" id="conference-code" name="conferenceCode">
        
        <!-- Basic Information -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label for="participant-id-display" class="block text-sm font-medium text-gray-700 mb-1">Participant ID</label>
            <input type="text" id="participant-id-display" class="form-input w-full bg-gray-100 border border-gray-300 rounded-md py-2 px-3 text-gray-700" readonly>
            <p class="text-xs text-gray-500 mt-1">ID cannot be changed</p>
          </div>
          
          <div>
            <label for="participant-name" class="block text-sm font-medium text-gray-700 mb-1">Name <span class="text-red-500">*</span></label>
            <input type="text" id="participant-name" name="name" class="form-input w-full border border-gray-300 rounded-md py-2 px-3 text-gray-700" required>
          </div>
          
          <div>
            <label for="participant-email" class="block text-sm font-medium text-gray-700 mb-1">Email <span class="text-red-500">*</span></label>
            <input type="email" id="participant-email" name="email" class="form-input w-full border border-gray-300 rounded-md py-2 px-3 text-gray-700" required>
          </div>
          
          <div>
            <label for="participant-phone" class="block text-sm font-medium text-gray-700 mb-1">Phone <span class="text-red-500">*</span></label>
            <input type="tel" id="participant-phone" name="phone" class="form-input w-full border border-gray-300 rounded-md py-2 px-3 text-gray-700" required>
          </div>
          
          <div>
            <label for="participant-workunit" class="block text-sm font-medium text-gray-700 mb-1">Work Unit</label>
            <input type="text" id="participant-workunit" name="workunit" class="form-input w-full border border-gray-300 rounded-md py-2 px-3 text-gray-700">
          </div>
          
          <div>
            <label for="participant-rank" class="block text-sm font-medium text-gray-700 mb-1">Rank</label>
            <input type="text" id="participant-rank" name="rank" class="form-input w-full border border-gray-300 rounded-md py-2 px-3 text-gray-700">
          </div>
          
          <div>
            <label for="participant-academic" class="block text-sm font-medium text-gray-700 mb-1">Academic</label>
            <input type="text" id="participant-academic" name="academic" class="form-input w-full border border-gray-300 rounded-md py-2 px-3 text-gray-700">
          </div>
          
          <div>
            <label for="participant-position" class="block text-sm font-medium text-gray-700 mb-1">Position</label>
            <input type="text" id="participant-position" name="position" class="form-input w-full border border-gray-300 rounded-md py-2 px-3 text-gray-700">
          </div>
          
          <div>
            <label for="participant-role" class="block text-sm font-medium text-gray-700 mb-1">Role</label>
            <input type="text" id="participant-role" name="role" class="form-input w-full border border-gray-300 rounded-md py-2 px-3 text-gray-700">
          </div>
          
          <div>
            <label for="participant-speciality" class="block text-sm font-medium text-gray-700 mb-1">Speciality</label>
            <input type="text" id="participant-speciality" name="speciality" class="form-input w-full border border-gray-300 rounded-md py-2 px-3 text-gray-700">
          </div>
        </div>
        
        <!-- Additional Information -->
        <div class="mt-6">
          <h4 class="text-md font-medium text-gray-700 mb-2">Options</h4>
          <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
            <label class="inline-flex items-center">
              <input type="checkbox" id="participant-speech" name="speech" class="form-checkbox h-4 w-4 text-blue-600">
              <span class="ml-2 text-sm text-gray-700">Speech</span>
            </label>
            <label class="inline-flex items-center">
              <input type="checkbox" id="participant-lunch" name="lunch" class="form-checkbox h-4 w-4 text-blue-600">
              <span class="ml-2 text-sm text-gray-700">Lunch</span>
            </label>
            <label class="inline-flex items-center">
              <input type="checkbox" id="participant-dinner" name="dinner" class="form-checkbox h-4 w-4 text-blue-600">
              <span class="ml-2 text-sm text-gray-700">Dinner</span>
            </label>
            <label class="inline-flex items-center">
              <input type="checkbox" id="participant-transport" name="transport" class="form-checkbox h-4 w-4 text-blue-600">
              <span class="ml-2 text-sm text-gray-700">Transport</span>
            </label>
            <label class="inline-flex items-center">
              <input type="checkbox" id="participant-email-sent" name="emailSent" class="form-checkbox h-4 w-4 text-blue-600">
              <span class="ml-2 text-sm text-gray-700">Email Sent</span>
            </label>
          </div>
        </div>
        
        <div class="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label for="participant-feedback" class="block text-sm font-medium text-gray-700 mb-1">Feedback</label>
            <textarea id="participant-feedback" name="feedback" rows="3" class="form-textarea w-full border border-gray-300 rounded-md py-2 px-3 text-gray-700"></textarea>
          </div>
          
          <div>
            <label for="participant-questions" class="block text-sm font-medium text-gray-700 mb-1">Questions</label>
            <textarea id="participant-questions" name="questions" rows="3" class="form-textarea w-full border border-gray-300 rounded-md py-2 px-3 text-gray-700"></textarea>
          </div>
        </div>
        
        <!-- Registration Time (read-only) -->
        <div>
          <label for="participant-registration-time" class="block text-sm font-medium text-gray-700 mb-1">Registration Time</label>
          <input type="text" id="participant-registration-time" class="form-input w-full bg-gray-100 border border-gray-300 rounded-md py-2 px-3 text-gray-700" readonly>
        </div>
      </form>
    </div>
    
    <div class="px-6 py-4 border-t border-gray-200 flex justify-end sticky bottom-0 bg-white z-10">
      <button id="close-modal-btn" class="btn bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded mr-2">Cancel</button>
      <button id="save-participant-btn" class="btn bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded">Save Changes</button>
    </div>
  </div>
</div>

<%- contentFor('script') %>
<script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Existing dashboard JavaScript (event listeners for conference select, buttons, etc.)
    const conferenceSelect = document.getElementById('conference-select');
    const participantsTableBody = document.getElementById('participants-table-body');
    const totalRegistrationsEl = document.getElementById('total-registrations');
    const lunchCountEl = document.getElementById('lunch-count');
    const dinnerCountEl = document.getElementById('dinner-count');
    const transportCountEl = document.getElementById('transport-count');
    const hocVienCountEl = document.getElementById('hocvien-count');
    const donViNgoaiCountEl = document.getElementById('donvingoai-count');

    const confNameEl = document.getElementById('conf-name');
    const confLocationEl = document.getElementById('conf-location');
    const confTimeEl = document.getElementById('conf-time');
    const confDatesEl = document.getElementById('conf-dates');
    const conferenceInfoDiv = document.getElementById('conference-info');

    const newConferenceBtn = document.getElementById('new-conference-btn');
    const exportExcelBtn = document.querySelector('a[href="/admin/export"]'); // Assuming this is the export button

    // New buttons for Select/Stop Conference
    const selectConferenceBtn = document.getElementById('select-conference-btn');
    const stopConferenceBtn = document.getElementById('stop-conference-btn');
    const conferenceActionBtns = document.querySelectorAll('.conference-action-btn');
    
    // Important: Make sure we use the same variable throughout the code for the conference select dropdown
    // conferenceSelectDropdown should refer to the same element as conferenceSelect
    const conferenceSelectDropdown = conferenceSelect;
    
    // Add this line to help debug
    console.log('Conference select found:', conferenceSelect ? 'Yes' : 'No');
    
    // Ensure the dropdown exists before continuing
    if (!conferenceSelect) {
        console.error('Conference select dropdown not found in the DOM');
        return;
    }

    // Active state classes for new buttons
    const selectActiveClasses = ['bg-sky-700', 'ring-2', 'ring-sky-400', 'ring-offset-1', 'shadow-lg'];
    const stopActiveClasses = ['bg-red-700', 'ring-2', 'ring-red-400', 'ring-offset-1', 'shadow-lg'];

    // Default state classes for new buttons
    const selectDefaultClasses = ['bg-sky-500', 'hover:bg-sky-600'];
    const stopDefaultClasses = ['bg-red-500', 'hover:bg-red-600'];

    // --- Logic for Select/Stop Conference Buttons ---
    conferenceActionBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            const isAlreadyActive = this.dataset.active === 'true';
            const selectedConferenceCode = conferenceSelectDropdown.value;
            const selectedConferenceName = conferenceSelectDropdown.selectedOptions[0] ? 
                conferenceSelectDropdown.selectedOptions[0].text : 'N/A';

            // Deactivate all conference action buttons first
            conferenceActionBtns.forEach(b => {
                b.dataset.active = 'false';
                if (b.id === 'select-conference-btn') {
                    b.classList.remove(...selectActiveClasses);
                    b.classList.add(...selectDefaultClasses);
                } else if (b.id === 'stop-conference-btn') {
                    b.classList.remove(...stopActiveClasses);
                    b.classList.add(...stopDefaultClasses);
                }
            });

            if (!isAlreadyActive) {
                if (!selectedConferenceCode) {
                    showAdminAlert('Please select a conference first', 'error');
                    return;
                }

                this.dataset.active = 'true';
                if (this.id === 'select-conference-btn') {
                    this.classList.remove(...selectDefaultClasses);
                    this.classList.add(...selectActiveClasses);
                    
                    // Call API to activate the selected conference
                    fetch(`/admin/api/conferences/${selectedConferenceCode}/activate`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showAdminAlert(`Conference "${selectedConferenceName}" is now active and available for registration`, 'success');
                            // Refresh data to show updated status
                            fetchDashboardData(selectedConferenceCode);
                        } else {
                            showAdminAlert(data.message || 'Failed to activate conference', 'error');
                            this.dataset.active = 'false';
                            this.classList.remove(...selectActiveClasses);
                            this.classList.add(...selectDefaultClasses);
                        }
                    })
                    .catch(error => {
                        console.error('Error activating conference:', error);
                        showAdminAlert('Error activating conference', 'error');
                        this.dataset.active = 'false';
                        this.classList.remove(...selectActiveClasses);
                        this.classList.add(...selectDefaultClasses);
                    });
                } else if (this.id === 'stop-conference-btn') {
                    this.classList.remove(...stopDefaultClasses);
                    this.classList.add(...stopActiveClasses);
                    
                    // Call API to deactivate the selected conference
                    fetch(`/admin/api/conferences/${selectedConferenceCode}/deactivate`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showAdminAlert(`Conference "${selectedConferenceName}" has been deactivated. Users can no longer register.`, 'warning');
                            // Refresh data to show updated status
                            fetchDashboardData(selectedConferenceCode);
                        } else {
                            showAdminAlert(data.message || 'Failed to deactivate conference', 'error');
                            this.dataset.active = 'false';
                            this.classList.remove(...stopActiveClasses);
                            this.classList.add(...stopDefaultClasses);
                        }
                    })
                    .catch(error => {
                        console.error('Error deactivating conference:', error);
                        showAdminAlert('Error deactivating conference', 'error');
                        this.dataset.active = 'false';
                        this.classList.remove(...stopActiveClasses);
                        this.classList.add(...stopDefaultClasses);
                    });
                }
            } else {
                // If clicking an already active button, cancel the action
                if (this.id === 'select-conference-btn') {
                    showAdminAlert('Selection canceled', 'info');
                } else if (this.id === 'stop-conference-btn') {
                    showAdminAlert('Stop action canceled', 'info');
                }
            }
        });
    });

    const socket = io();

    socket.on('connect', () => {
        console.log('Connected to Socket.IO server from admin dashboard');
        // Request initial stats for the default selected conference
        const initialConferenceCode = conferenceSelect.value;
        fetchDashboardData(initialConferenceCode);
    });

    socket.on('statsUpdated', (updatedStats) => {
        console.log('Received statsUpdated event:', updatedStats);
        const currentSelectedConference = conferenceSelect.value;
        // Update stats only if they are for the currently selected conference or 'all'
        if (updatedStats.conferenceCode === currentSelectedConference || currentSelectedConference === 'all') {
            updateStatsDisplay(updatedStats.stats);
            if (updatedStats.participants) {
                 // If a specific conference is selected and matches, or if 'all' is selected, update table
                if (currentSelectedConference === 'all' || updatedStats.conferenceCode === currentSelectedConference) {
                    renderParticipantsTable(updatedStats.participants);
                }
            }
            if (updatedStats.conferenceDetails && updatedStats.conferenceCode !== 'all') {
                updateConferenceInfoDisplay(updatedStats.conferenceDetails);
            }
        }
    });

    function updateConferenceInfoDisplay(conference) {
        if (conference) {
            confNameEl.textContent = conference.name || '-';
            confLocationEl.textContent = conference.location ? conference.location.name : (conference.locationName || '-');
            confTimeEl.textContent = conference.time || '-';
            confDatesEl.textContent = conference.formattedDates || '-';
            conferenceInfoDiv.classList.remove('hidden');
        } else {
            conferenceInfoDiv.classList.add('hidden');
        }
    }

    function fetchDashboardData(conferenceCode) {
        console.log(`Fetching data for conference: ${conferenceCode}`);
        
        // Check if the conference code is valid
        if (!conferenceCode) {
            console.error('Invalid conference code provided to fetchDashboardData');
            showAdminAlert('Invalid conference selection', 'error');
            return;
        }
        
        // Show loading indicator in the participants table
        participantsTableBody.innerHTML = `
            <tr>
                <td colspan="18" class="text-center py-4">
                    <div class="flex justify-center items-center">
                        <svg class="animate-spin h-5 w-5 mr-3 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <span class="text-gray-500">Loading participants...</span>
                    </div>
                </td>
            </tr>
        `;
        
        fetch(`/admin/api/dashboard-data?conferenceCode=${conferenceCode}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    console.log('Dashboard data received:', data);
                    console.log(`Received ${data.participants ? data.participants.length : 0} participants`);
                    
                    // Update stats
                    updateStatsDisplay(data.stats);
                    
                    // Update participants table
                    renderParticipantsTable(data.participants);
                    
                    // Update conference options to show active status if the data includes conference list
                    if (data.conferences && data.conferences.length > 0) {
                        updateConferenceDropdown(data.conferences, conferenceCode);
                    }
                    
                    // Update conference details display
                    if (data.conferenceDetails) {
                        updateConferenceInfoDisplay(data.conferenceDetails);
                        conferenceInfoDiv.classList.remove('hidden');
                    } else {
                        conferenceInfoDiv.classList.add('hidden');
                    }
                    
                    // Update export URL
                    if (exportExcelBtn) {
                        exportExcelBtn.href = `/admin/export?conferenceCode=${conferenceCode}`;
                    }
                } else {
                    showAdminAlert(data.message || 'Error fetching dashboard data.', 'error');
                    participantsTableBody.innerHTML = '<tr><td colspan="18" class="text-center py-4 text-red-500">Error loading participants</td></tr>';
                }
            })
            .catch(error => {
                console.error('Error fetching dashboard data:', error);
                showAdminAlert('Network error or server issue while fetching dashboard data.', 'error');
                participantsTableBody.innerHTML = '<tr><td colspan="18" class="text-center py-4 text-red-500">Error: Could not load participants</td></tr>';
            });
    }

    function updateConferenceDropdown(conferences, currentSelection) {
        console.log(`Updating conference dropdown with selection: ${currentSelection}`);
        
        // Store current scroll position
        const scrollPosition = window.scrollY;
        
        // Save the current selection if not provided
        if (!currentSelection && conferenceSelect.selectedOptions.length > 0) {
            currentSelection = conferenceSelect.value;
            console.log(`Using existing selection: ${currentSelection}`);
        }
        
        // Clear existing options
        while (conferenceSelect.options.length > 0) {
            conferenceSelect.remove(0);
        }
        
        // Add conferences to dropdown
        if (conferences.length === 0) {
            const option = document.createElement('option');
            option.value = '';
            option.text = 'No conferences available';
            option.disabled = true;
            conferenceSelect.appendChild(option);
        } else {
            conferences.forEach(conference => {
                const option = document.createElement('option');
                option.value = conference.code;
                // Add a marker for active conferences
                option.text = conference.name + (conference.isActive ? ' (Active)' : '');
                option.selected = conference.code === currentSelection;
                // Add data attributes for the active status
                option.dataset.isActive = conference.isActive;
                conferenceSelect.appendChild(option);
                
                if (conference.code === currentSelection) {
                    console.log(`Selected option created: ${option.text}`);
                }
            });
            
            // If the current selection is not in the list, select the first option
            if (conferenceSelect.selectedIndex === -1 && conferenceSelect.options.length > 0) {
                conferenceSelect.selectedIndex = 0;
                console.log(`Selection not found, defaulting to first option: ${conferenceSelect.options[0].text}`);
            }
        }
        
        console.log(`Dropdown updated with ${conferenceSelect.options.length} options, selected: ${conferenceSelect.selectedIndex}`);
        
        // Restore scroll position
        window.scrollTo(0, scrollPosition);
    }

    function updateStatsDisplay(stats) {
        totalRegistrationsEl.textContent = stats.totalParticipants || 0;
        lunchCountEl.textContent = stats.lunchCount || 0;
        dinnerCountEl.textContent = stats.dinnerCount || 0;
        transportCountEl.textContent = stats.transportCount || 0;
        hocVienCountEl.textContent = stats.hocVienCount || 0;
        donViNgoaiCountEl.textContent = stats.donViNgoaiCount || 0;
    }

    function renderParticipantsTable(participants) {
        console.log(`Rendering ${participants ? participants.length : 0} participants in table`);
        
        // Clear existing rows
        participantsTableBody.innerHTML = ''; 
        
        // If no participants, show a message
        if (!participants || participants.length === 0) {
            participantsTableBody.innerHTML = '<tr><td colspan="18" class="text-center py-4 text-gray-500">No participants for this conference.</td></tr>';
            return;
        }
        
        // Loop through participants and create table rows
        participants.forEach((participant, index) => {
            // Use participant.displayId which is already formatted as 4-digit string by the controller
            const participantIdToDisplay = participant.displayId || 'N/A'; 
            
            const row = `
                <tr data-id="${participant._id}" data-conference="${participant.conferenceCode || 'CONF'}">
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${participantIdToDisplay}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${participant.name}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${participant.email}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${participant.phone || '-'}</td>
                    <%/* <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"> */%>
                      <%/*= participant.address || '-' */%>
                    <%/* </td> */%>
                    <%/* <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"> */%>
                      <%/*= participant.age || '-' */%>
                    <%/* </td> */%>
                    <%/* <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"> */%>
                      <%/*= participant.business || '-' */%>
                    <%/* </td> */%>
                    <%/* <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"> */%>
                      <%/*= participant.nationality || '-' */%>
                    <%/* </td> */%>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${participant.workunit || '-'}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${participant.rank || '-'}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${participant.academic || '-'}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${participant.role || '-'}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${participant.speech ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                            ${participant.speech ? 'Yes' : 'No'}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${participant.lunch ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                            ${participant.lunch ? 'Yes' : 'No'}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${participant.dinner ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                            ${participant.dinner ? 'Yes' : 'No'}
                        </span>
                    </td>
                     <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${participant.transport ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                            ${participant.transport ? 'Yes' : 'No'}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 truncate max-w-xs">${participant.feedback || '-'}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 truncate max-w-xs">${participant.questions || '-'}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${new Date(participant.registrationTime || participant.registrationDate || participant.createdAt).toLocaleString('vi-VN')}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        ${participant.attendanceStatus === 'attended' ? '<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">Attended</span>' : 
                          participant.attendanceStatus === 'absent' ? '<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">Absent</span>' : 
                          '<button class="mark-attendance-btn btn btn-sm bg-gray-200 hover:bg-gray-300 text-gray-700" data-action="attended">Mark Attended</button><button class="mark-attendance-btn btn btn-sm bg-gray-200 hover:bg-gray-300 text-gray-700 mt-1" data-action="absent">Mark Absent</button>'}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <span class="email-status-${participant._id} px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${participant.emailSent ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">
                            ${participant.emailSent ? 'Sent' : 'Pending'}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <div class="flex space-x-2">
                            <button class="send-email-btn text-blue-600 hover:text-blue-800" ${participant.emailSent ? 'disabled' : ''} >
                                ${participant.emailSent ? 'Email Sent' : 'Send Email'}
                            </button>
                            <button class="edit-participant-btn text-indigo-600 hover:text-indigo-900">Edit</button>
                            <button class="delete-participant-btn text-red-600 hover:text-red-900">Delete</button>
                        </div>
                    </td>
                </tr>
            `;
            participantsTableBody.insertAdjacentHTML('beforeend', row);
        });
        
        // Add event listeners to the newly created table rows
        addTableActionListeners();
        console.log('Table updated and event listeners attached');
    }

    function addTableActionListeners() {
        document.querySelectorAll('.send-email-btn').forEach(button => {
            button.addEventListener('click', function() {
                if (this.disabled) return;
                const participantId = this.closest('tr').dataset.id;
                sendSingleEmail(participantId, this);
            });
        });

        document.querySelectorAll('.edit-participant-btn').forEach(button => {
            button.addEventListener('click', function() {
                const participantId = this.closest('tr').dataset.id;
                openEditParticipantModal(participantId);
            });
        });

        document.querySelectorAll('.delete-participant-btn').forEach(button => {
            button.addEventListener('click', function() {
                const participantId = this.closest('tr').dataset.id;
                const participantName = this.closest('tr').querySelector('td:nth-child(2)').textContent.trim();
                confirmAndDeleteParticipant(participantId, participantName);
            });
        });
        document.querySelectorAll('.mark-attendance-btn').forEach(button => {
            button.addEventListener('click', function() {
                const participantId = this.closest('tr').dataset.id;
                const action = this.dataset.action;
                markAttendance(participantId, action, this);
            });
        });
    }
    
    async function markAttendance(participantId, action, button) {
        try {
            const response = await fetch(`/admin/api/participants/${participantId}/attendance`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ attendanceStatus: action })
            });
            const result = await response.json();
            if (result.success) {
                showAdminAlert('Attendance updated successfully!', 'success');
                // Visually update the cell
                const cell = button.parentElement;
                if (action === 'attended') {
                    cell.innerHTML = '<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">Attended</span>';
                } else if (action === 'absent') {
                    cell.innerHTML = '<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">Absent</span>';
                }
                fetchDashboardData(conferenceSelect.value); // Refresh stats and potentially table
            } else {
                showAdminAlert(result.message || 'Failed to update attendance.', 'error');
            }
        } catch (error) {
            console.error('Error updating attendance:', error);
            showAdminAlert('An error occurred while updating attendance.', 'error');
        }
    }

    async function sendSingleEmail(participantId, button) {
        button.disabled = true;
        button.textContent = 'Sending...';
        try {
            const response = await fetch(`/admin/api/participants/${participantId}/send-email`, {
                method: 'POST'
            });
            const result = await response.json();
            if (result.success) {
                showAdminAlert('Email sent successfully!', 'success');
                button.textContent = 'Email Sent';
                const emailStatusSpan = document.querySelector(`.email-status-${participantId}`);
                if (emailStatusSpan) {
                    emailStatusSpan.classList.remove('bg-yellow-100', 'text-yellow-800');
                    emailStatusSpan.classList.add('bg-green-100', 'text-green-800');
                    emailStatusSpan.textContent = 'Sent';
                }
                 fetchDashboardData(conferenceSelect.value); // Refresh stats and potentially table
            } else {
                showAdminAlert(result.message || 'Failed to send email.', 'error');
                button.disabled = false;
                button.textContent = 'Send Email';
            }
        } catch (error) {
            console.error('Error sending email:', error);
            showAdminAlert('An error occurred while sending the email.', 'error');
            button.disabled = false;
            button.textContent = 'Send Email';
        }
    }

    async function confirmAndDeleteParticipant(participantId, participantName) {
        // Create a custom confirmation box
        const confirmBox = document.createElement('div');
        confirmBox.className = 'fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50';
        confirmBox.innerHTML = `
            <div class="bg-white rounded-lg p-6 max-w-md">
                <h3 class="text-lg font-bold text-gray-900 mb-4">Confirm Deletion</h3>
                <p class="text-gray-700 mb-4">Are you sure you want to delete participant <strong>${participantName}</strong>? This action cannot be undone.</p>
                <div class="flex justify-end">
                    <button class="btn-cancel bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded mr-2">Cancel</button>
                    <button class="btn-confirm bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded">Delete</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(confirmBox);
        
        // Handle button clicks
        confirmBox.querySelector('.btn-cancel').addEventListener('click', () => {
            document.body.removeChild(confirmBox);
        });
        
        confirmBox.querySelector('.btn-confirm').addEventListener('click', async () => {
            try {
                const response = await fetch(`/admin/api/participants/${participantId}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAdminAlert('Participant deleted successfully', 'success');
                    // Refresh the data to reflect deletion
                    fetchDashboardData(conferenceSelect.value);
                } else {
                    showAdminAlert(result.message || 'Failed to delete participant', 'error');
                }
            } catch (error) {
                console.error('Error deleting participant:', error);
                showAdminAlert('An error occurred while deleting participant', 'error');
            } finally {
                document.body.removeChild(confirmBox);
            }
        });
    }
    
    async function openEditParticipantModal(participantId) {
        try {
            const response = await fetch(`/admin/api/participants/${participantId}`);
            const result = await response.json();
            
            if (result.success) {
                const participant = result.participant;
                
                // Set modal title and switch to edit mode
                modalTitle.textContent = 'Edit Participant';
                
                // Fill hidden fields
                document.getElementById('participant-id').value = participant._id;
                document.getElementById('conference-code').value = participant.conferenceCode;
                
                // Fill visible fields
                document.getElementById('participant-id-display').value = participant.participantId || 'N/A';
                document.getElementById('participant-name').value = participant.name || '';
                document.getElementById('participant-email').value = participant.email || '';
                document.getElementById('participant-phone').value = participant.phone || '';
                document.getElementById('participant-workunit').value = participant.workunit || '';
                document.getElementById('participant-rank').value = participant.rank || '';
                document.getElementById('participant-academic').value = participant.academic || '';
                document.getElementById('participant-position').value = participant.position || '';
                document.getElementById('participant-speciality').value = participant.speciality || '';
                document.getElementById('participant-role').value = participant.role || '';
                document.getElementById('participant-feedback').value = participant.feedback || '';
                document.getElementById('participant-questions').value = participant.questions || '';
                
                // Set checkboxes
                document.getElementById('participant-speech').checked = participant.speech || false;
                document.getElementById('participant-lunch').checked = participant.lunch || false;
                document.getElementById('participant-dinner').checked = participant.dinner || false;
                document.getElementById('participant-transport').checked = participant.transport || false;
                document.getElementById('participant-email-sent').checked = participant.emailSent || false;
                
                // Format and set registration time
                let registrationTime = participant.registrationTime || participant.registrationDate || participant.createdAt;
                if (registrationTime) {
                    registrationTime = new Date(registrationTime).toLocaleString();
                }
                document.getElementById('participant-registration-time').value = registrationTime || 'Unknown';
                
                // Show modal
                participantModal.classList.remove('hidden');
            } else {
                showAdminAlert(result.message || 'Failed to load participant details', 'error');
            }
        } catch (error) {
            console.error('Error loading participant details:', error);
            showAdminAlert('An error occurred while loading participant details', 'error');
        }
    }
    
    // Save participant changes
    saveParticipantBtn.addEventListener('click', async function() {
        if (!editParticipantForm.checkValidity()) {
            // Trigger native form validation
            editParticipantForm.reportValidity();
            return;
        }
        
        try {
            const participantId = document.getElementById('participant-id').value;
            
            // Create form data object
            const formData = new FormData(editParticipantForm);
            const participantData = {};
            
            // Convert form data to JSON object
            formData.forEach((value, key) => {
                // Handle checkboxes
                if (key === 'speech' || key === 'lunch' || key === 'dinner' || 
                    key === 'transport' || key === 'emailSent') {
                    participantData[key] = true; // Checked checkboxes are included in formData
                } else {
                    participantData[key] = value;
                }
            });
            
            // For unchecked checkboxes, they won't be in formData, so add them explicitly
            ['speech', 'lunch', 'dinner', 'transport', 'emailSent'].forEach(field => {
                if (!participantData.hasOwnProperty(field)) {
                    participantData[field] = false;
                }
            });
            
            saveParticipantBtn.disabled = true;
            saveParticipantBtn.innerHTML = `<svg class="animate-spin h-5 w-5 mr-2 inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Saving...`;
            
            const response = await fetch(`/admin/api/participants/${participantId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(participantData)
            });
            
            const result = await response.json();
            
            if (result.success) {
                closeModal();
                showAdminAlert('Participant updated successfully', 'success');
                
                // Refresh the data to reflect changes
                fetchDashboardData(conferenceSelect.value);
            } else {
                showAdminAlert(result.message || 'Failed to update participant', 'error');
            }
        } catch (error) {
            console.error('Error updating participant:', error);
            showAdminAlert('An error occurred while updating participant', 'error');
        } finally {
            saveParticipantBtn.disabled = false;
            saveParticipantBtn.innerHTML = 'Save Changes';
        }
    });
    
    // Close modal when clicking close buttons or outside
    [closeModalBtn, closeModalFooterBtn].forEach(btn => {
        btn.addEventListener('click', closeModal);
    });
    
    // Close modal when clicking outside
    window.addEventListener('click', e => {
        if (e.target === participantModal) {
            closeModal();
        }
    });
    
    function closeModal() {
        participantModal.classList.add('hidden');
        // Clear form when modal is closed
        editParticipantForm.reset();
    }

    const sendBulkEmailsBtn = document.getElementById('send-bulk-emails');
    if (sendBulkEmailsBtn) {
        sendBulkEmailsBtn.addEventListener('click', async () => {
            const selectedConference = conferenceSelect.value;
            if (!selectedConference || selectedConference === 'all') {
                showAdminAlert('Please select a specific conference to send bulk emails.', 'warning');
                return;
            }
            if (!confirm(`Are you sure you want to send bulk emails for conference: ${conferenceSelect.options[conferenceSelect.selectedIndex].text}? This will only send to participants who haven't received an email yet.`)) {
                return;
            }
            sendBulkEmailsBtn.disabled = true;
            sendBulkEmailsBtn.innerHTML = '<svg class="animate-spin h-5 w-5 mr-2 inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Sending...';

            try {
                const response = await fetch(`/admin/api/conferences/${selectedConference}/send-bulk-emails`, {
                    method: 'POST'
                });
                const result = await response.json();
                if (result.success) {
                    showAdminAlert(result.message || 'Bulk emails sent successfully!', 'success');
                    fetchDashboardData(selectedConference); // Refresh data
                } else {
                    showAdminAlert(result.message || 'Failed to send bulk emails.', 'error');
                }
            } catch (error) {
                console.error('Error sending bulk emails:', error);
                showAdminAlert('An error occurred while sending bulk emails.', 'error');
            } finally {
                sendBulkEmailsBtn.disabled = false;
                sendBulkEmailsBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" /></svg> Send Bulk Emails';
            }
        });
    }

    if (conferenceSelect) {
        conferenceSelect.addEventListener('change', function() {
            const selectedConferenceCode = this.value;
            console.log('Conference selection changed to:', selectedConferenceCode);
            
            // Update UI elements to show which conference is selected
            document.querySelectorAll('#conference-select option').forEach(option => {
                if (option.value === selectedConferenceCode) {
                    console.log(`Selected conference: ${option.text}`);
                }
            });
            
            // Call the fetch function to update the dashboard with the new selection
            fetchDashboardData(selectedConferenceCode);
        });
    } else {
        console.error('Conference select element not found - cannot attach change event handler');
    }

    // Function to show admin alerts (generic)
    function showAdminAlert(message, type = 'info', duration = 5000) {
        const container = document.getElementById('alert-container');
        const alertBox = document.getElementById('alert-box');
        const alertMessage = document.getElementById('alert-message');
        const closeButton = document.getElementById('close-alert');

        if (!container || !alertBox || !alertMessage || !closeButton) {
            console.error('Alert elements not found in the DOM.');
            return;
        }

        alertMessage.textContent = message;

        alertBox.classList.remove('bg-blue-100', 'border-blue-500', 'text-blue-700', 'bg-green-100', 'border-green-500', 'text-green-700', 'bg-yellow-100', 'border-yellow-500', 'text-yellow-700', 'bg-red-100', 'border-red-500', 'text-red-700');

        if (type === 'success') {
            alertBox.classList.add('bg-green-100', 'border-green-500', 'text-green-700');
        } else if (type === 'error') {
            alertBox.classList.add('bg-red-100', 'border-red-500', 'text-red-700');
        } else if (type === 'warning') {
            alertBox.classList.add('bg-yellow-100', 'border-yellow-500', 'text-yellow-700');
        } else {
            alertBox.classList.add('bg-blue-100', 'border-blue-500', 'text-blue-700');
        }

        container.classList.remove('hidden');
        let alertTimeout = container.dataset.alertTimeout;
        if(alertTimeout) clearTimeout(alertTimeout);

        alertTimeout = setTimeout(() => {
            container.classList.add('hidden');
        }, duration);
        container.dataset.alertTimeout = alertTimeout;

        const closeAlertHandler = () => {
            clearTimeout(alertTimeout);
            container.classList.add('hidden');
            closeButton.removeEventListener('click', closeAlertHandler); 
        };
        closeButton.removeEventListener('click', closeAlertHandler); // Remove previous before adding new
        closeButton.addEventListener('click', closeAlertHandler);
    }

    if (newConferenceBtn) {
        newConferenceBtn.addEventListener('click', () => {
            window.location.href = '/admin/conferences/new'; 
        });
    }

    // Initial fetch based on selected conference (if any)
    if (conferenceSelect && conferenceSelect.value) {
        fetchDashboardData(conferenceSelect.value);
    } else {
        // If no conference is selected, fetch all conferences to populate the dropdown
        fetch('/admin/api/dashboard-data')
            .then(response => response.json())
            .then(data => {
                if (data.success && data.conferences && data.conferences.length > 0) {
                    updateConferenceDropdown(data.conferences);
                    // Select the first conference
                    if (conferenceSelect.options.length > 0) {
                        fetchDashboardData(conferenceSelect.options[0].value);
                    }
                }
            })
            .catch(error => {
                console.error('Error fetching initial data:', error);
            });
    }
});
</script> 